name: Deploy ChittyMCP

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  validate:
    name: Validate ChittyMCP Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: mcp-unified-consolidated/package-lock.json

      - name: Install dependencies (unified server)
        working-directory: mcp-unified-consolidated
        run: npm ci

      - name: Install dependencies (mcp-exec)
        working-directory: services/mcp-exec
        run: npm ci

      - name: Build TypeScript (mcp-exec)
        working-directory: services/mcp-exec
        run: npm run build

      - name: Run ChittyCheck validation
        env:
          CHITTY_ID_TOKEN: ${{ secrets.CHITTY_ID_TOKEN }}
        run: |
          if [ -f "/usr/local/bin/chittycheck" ]; then
            chittycheck --service chittymcp
          else
            echo "⚠️  ChittyCheck not installed, skipping validation"
          fi

      - name: Validate service bindings
        run: |
          if [ ! -f "wrangler.toml" ]; then
            echo "❌ wrangler.toml not found"
            exit 1
          fi
          echo "✓ wrangler.toml found"

      - name: Validate chains.json
        run: |
          node -e "const chains = require('./config/chains.json'); console.log('✓ chains.json valid - ' + Object.keys(chains.chains).length + ' chains');"

  deploy-production:
    name: Deploy to Production
    needs: validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://mcp.chitty.cc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: mcp-unified-consolidated/package-lock.json

      - name: Install dependencies
        working-directory: mcp-unified-consolidated
        run: npm ci

      - name: Deploy to Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          npx wrangler deploy --env production

      - name: Verify deployment
        env:
          CHITTY_ID_TOKEN: ${{ secrets.CHITTY_ID_TOKEN }}
        run: |
          sleep 10
          HEALTH=$(curl -s https://mcp.chitty.cc/health || echo '{"status":"unknown"}')
          STATUS=$(echo $HEALTH | jq -r '.status' || echo "unknown")

          if [ "$STATUS" != "healthy" ] && [ "$STATUS" != "unknown" ]; then
            echo "❌ Health check failed"
            echo "$HEALTH"
            exit 1
          fi

          echo "✅ ChittyMCP deployed"
          echo "$HEALTH" | jq '.' || echo "$HEALTH"

      - name: Mint deployment ChittyID
        env:
          CHITTY_ID_TOKEN: ${{ secrets.CHITTY_ID_TOKEN }}
        run: |
          DEPLOYMENT_ID=$(curl -s -X POST https://id.chitty.cc/v1/mint \
            -H "Authorization: Bearer $CHITTY_ID_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "type": "EVENT",
              "metadata": {
                "service": "chittymcp",
                "version": "1.0.0",
                "environment": "production",
                "commit": "${{ github.sha }}",
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
              }
            }' | jq -r '.chittyId' || echo "CHITTY-EVNT-UNKNOWN")

          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
          echo "✅ Deployment ChittyID: $DEPLOYMENT_ID"

      - name: Post to ChittyChain
        env:
          CHITTY_ID_TOKEN: ${{ secrets.CHITTY_ID_TOKEN }}
        run: |
          curl -s -X POST https://chain.chitty.cc/v1/events \
            -H "Authorization: Bearer $CHITTY_ID_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "eventId": "${{ env.DEPLOYMENT_ID }}",
              "type": "deployment",
              "service": "chittymcp",
              "version": "1.0.0",
              "environment": "production",
              "commit": "${{ github.sha }}",
              "actor": "github-actions",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }' || echo "⚠️  ChittyChain not available"

  deploy-staging:
    name: Deploy to Staging
    needs: validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://mcp-staging.chitty.cc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: mcp-unified-consolidated/package-lock.json

      - name: Install dependencies
        working-directory: mcp-unified-consolidated
        run: npm ci

      - name: Deploy to Cloudflare Workers (Staging)
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          npx wrangler deploy --env staging

      - name: Verify staging deployment
        run: |
          sleep 5
          HEALTH=$(curl -s https://mcp-staging.chitty.cc/health || echo '{"status":"unknown"}')
          echo "$HEALTH" | jq '.' || echo "$HEALTH"
